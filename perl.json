[{"cmd":"perl","msg":"# Double space a file\nperl -pe '$\\=\"\\n\"'\nperl -pe 'BEGIN { $\\=\"\\n\" }'\nperl -pe '$_ .= \"\\n\"'\nperl -pe 's/$/\\n/'\n\n# Double space a file, except the blank lines\nperl -pe '$_ .= \"\\n\" unless /^$/'\nperl -pe '$_ .= \"\\n\" if /\\S/'\n\n# Triple space a file\nperl -pe '$\\=\"\\n\\n\"'\nperl -pe '$_.=\"\\n\\n\"'\n\n# N-space a file\nperl -pe '$_.=\"\\n\"x7'\n\n# Add a blank line before every line\nperl -pe 's//\\n/'\n\n# Remove all blank lines\nperl -ne 'print unless /^$/'\nperl -lne 'print if length'\nperl -ne 'print if /\\S/'\n\n# Remove all consecutive blank lines, leaving just one\nperl -00 -pe ''\nperl -00pe0\n\n# Compress/expand all blank lines into N consecutive ones\nperl -00 -pe '$_.=\"\\n\"x4'\n\n# Fold a file so that every set of 10 lines becomes one tab-separated line\nperl -lpe '$\\ = $. % 10 ? \"\\t\" : \"\\n\"'\n\n# Number all lines in a file\nperl -pe '$_ = \"$. $_\"'\n\n# Number only non-empty lines in a file\nperl -pe '$_ = ++$a.\" $_\" if /./'\n\n# Number and print only non-empty lines in a file (drop empty lines)\nperl -ne 'print ++$a.\" $_\" if /./'\n\n# Number all lines but print line numbers only non-empty lines\nperl -pe '$_ = \"$. $_\" if /./'\n\n# Number only lines that match a pattern, print others unmodified\nperl -pe '$_ = ++$a.\" $_\" if /regex/'\n\n# Number and print only lines that match a pattern\nperl -ne 'print ++$a.\" $_\" if /regex/'\n\n# Number all lines, but print line numbers only for lines that match a pattern\nperl -pe '$_ = \"$. $_\" if /regex/'\n\n# Number all lines in a file using a custom format (emulate cat -n)\nperl -ne 'printf \"%-5d %s\", $., $_'\n\n# Print the total number of lines in a file (emulate wc -l)\nperl -lne 'END { print $. }'\nperl -le 'print $n=()=\u003C\u003E'\nperl -le 'print scalar(()=\u003C\u003E)'\nperl -le 'print scalar(@foo=\u003C\u003E)'\nperl -ne '}{print $.'\nperl -nE '}{say $.'\n\n# Print the number of non-empty lines in a file\nperl -le 'print scalar(grep{/./}\u003C\u003E)'\nperl -le 'print ~~grep{/./}\u003C\u003E'\nperl -le 'print~~grep/./,\u003C\u003E'\nperl -E 'say~~grep/./,\u003C\u003E'\n\n# Print the number of empty lines in a file\nperl -lne '$a++ if /^$/; END {print $a+0}'\nperl -le 'print scalar(grep{/^$/}\u003C\u003E)'\nperl -le 'print ~~grep{/^$/}\u003C\u003E'\nperl -E 'say~~grep{/^$/}\u003C\u003E'\n\n# Print the number of lines in a file that match a pattern (emulate grep -c)\nperl -lne '$a++ if /regex/; END {print $a+0}'\nperl -nE '$a++ if /regex/; END {say $a+0}'\n\n# Convert an IP address to unsigned integer\nperl -le '$i=3; $u += ($_\u003C\u003C8*$i--) for \"127.0.0.1\" =~ /(\\d+)/g; print $u'\nperl -le '$ip=\"127.0.0.1\"; $ip =~ s/(\\d+)\\.?/sprintf(\"%02x\", $1)/ge; print hex($ip)'\nperl -le 'print unpack(\"N\", 127.0.0.1)'\nperl -MSocket -le 'print unpack(\"N\", inet_aton(\"127.0.0.1\"))'\n\n# Convert an unsigned integer to an IP address\nperl -MSocket -le 'print inet_ntoa(pack(\"N\", 2130706433))'\nperl -le '$ip = 2130706433; print join \".\", map { (($ip\u003E\u003E8*($_))\u00260xFF) } reverse 0..3'\nperl -le '$ip = 2130706433; $, = \".\"; print map { (($ip\u003E\u003E8*($_))\u00260xFF) } reverse 0..3'\n\n# Generate and print the alphabet\nperl -le 'print a..z'\nperl -le 'print (\"a\"..\"z\")'\nperl -le '$, = \",\"; print (\"a\"..\"z\")'\nperl -le 'print join \",\", (\"a\"..\"z\")'\n\n# Generate and print all the strings from \"a\" to \"zz\"\nperl -le 'print (\"a\"..\"zz\")'\nperl -le 'print \"aa\"..\"zz\"'\n\n# Create a hex lookup table\n@hex = (0..9, \"a\"..\"f\")\n\n# Convert a decimal number to hex using @hex lookup table\nperl -le '$num = 255; @hex = (0..9, \"a\"..\"f\"); while ($num) { $s = $hex[($num%16)\u002615].$s; $num = int $num/16 } print $s'\nperl -le '$hex = sprintf(\"%x\", 255); print $hex'\nperl -le '$num = \"ff\"; print hex $num'\n\n# Generate a random 8 character password\nperl -le 'print map { (\"a\"..\"z\")[rand 26] } 1..8'\nperl -le 'print map { (\"a\"..\"z\", 0..9)[rand 36] } 1..8'\n\n# Create a string of specific length\nperl -le 'print \"a\"x50'\n\n# Create a repeated list of elements\nperl -le '@list = (1,2)x20; print \"@list\"'\n\n# Create an array from a string\n@months = split ' ', \"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\"\n@months = qw/Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec/\n\n# Create a string from an array\n@stuff = (\"hello\", 0..9, \"world\"); $string = join '-', @stuff\n\n# Find the numeric values for characters in the string\nperl -le 'print join \", \", map { ord } split //, \"hello world\"'\n\n# Convert a list of numeric ASCII values into a string\nperl -le '@ascii = (99, 111, 100, 105, 110, 103); print pack(\"C*\", @ascii)'\nperl -le '@ascii = (99, 111, 100, 105, 110, 103); print map { chr } @ascii'\n\n# Generate an array with odd numbers from 1 to 100\nperl -le '@odd = grep {$_ % 2 == 1} 1..100; print \"@odd\"'\nperl -le '@odd = grep { $_ \u0026 1 } 1..100; print \"@odd\"'\n\n# Generate an array with even numbers from 1 to 100\nperl -le '@even = grep {$_ % 2 == 0} 1..100; print \"@even\"'\n\n# Find the length of the string\nperl -le 'print length \"one-liners are great\"'\n\n# Find the number of elements in an array\nperl -le '@array = (\"a\"..\"z\"); print scalar @array'\nperl -le '@array = (\"a\"..\"z\"); print $#array + 1'\n\n# ROT13 a string\n'y/A-Za-z/N-ZA-Mn-za-m/'\n\n# ROT 13 a file\nperl -lpe 'y/A-Za-z/N-ZA-Mn-za-m/' file\n\n# Base64 encode a string\nperl -MMIME::Base64 -e 'print encode_base64(\"string\")'\nperl -MMIME::Base64 -0777 -ne 'print encode_base64($_)' file\n\n# Base64 decode a string\nperl -MMIME::Base64 -le 'print decode_base64(\"base64string\")'\nperl -MMIME::Base64 -ne 'print decode_base64($_)' file\n\n# URL-escape a string\nperl -MURI::Escape -le 'print uri_escape($string)'\n\n# URL-unescape a string\nperl -MURI::Escape -le 'print uri_unescape($string)'\n\n# HTML-encode a string\nperl -MHTML::Entities -le 'print encode_entities($string)'\n\n# HTML-decode a string\nperl -MHTML::Entities -le 'print decode_entities($string)'\n\n# Convert all text to uppercase\nperl -nle 'print uc'\nperl -ple '$_=uc'\nperl -nle 'print \"\\U$_\"'\n\n# Convert all text to lowercase\nperl -nle 'print lc'\nperl -ple '$_=lc'\nperl -nle 'print \"\\L$_\"'\n\n# Uppercase only the first word of each line\nperl -nle 'print ucfirst lc'\nperl -nle 'print \"\\u\\L$_\"'\n\n# Invert the letter case\nperl -ple 'y/A-Za-z/a-zA-Z/'\n\n# Camel case each line\nperl -ple 's/(\\w+)/\\u$1/g'\nperl -ple 's/(?\u003C!['])(\\w+)/\\u\\1/g'\n\n# Strip leading whitespace (spaces, tabs) from the beginning of each line\nperl -ple 's/^[ \\t]+//'\nperl -ple 's/^\\s+//'\n\n# Strip trailing whitespace (space, tabs) from the end of each line\nperl -ple 's/[ \\t]+$//'\n\n# Strip whitespace from the beginning and end of each line\nperl -ple 's/^[ \\t]+|[ \\t]+$//g'\n\n# Convert UNIX newlines to DOS/Windows newlines\nperl -pe 's|\\n|\\r\\n|'\n\n# Convert DOS/Windows newlines to UNIX newlines\nperl -pe 's|\\r\\n|\\n|'\n\n# Convert UNIX newlines to Mac newlines\nperl -pe 's|\\n|\\r|'\n\n# Substitute (find and replace) \"foo\" with \"bar\" on each line\nperl -pe 's/foo/bar/'\n\n# Substitute (find and replace) all \"foo\"s with \"bar\" on each line\nperl -pe 's/foo/bar/g'\n\n# Substitute (find and replace) \"foo\" with \"bar\" on lines that match \"baz\"\nperl -pe '/baz/ \u0026\u0026 s/foo/bar/'\n\n# Binary patch a file (find and replace a given array of bytes as hex numbers)\nperl -pi -e 's/\\x89\\xD8\\x48\\x8B/\\x90\\x90\\x48\\x8B/g' file\n\n# Print the first line of a file (emulate head -1)\nperl -ne 'print; exit'\n\n# Print the first 10 lines of a file (emulate head -10)\nperl -ne 'print if $. \u003C= 10'\nperl -ne '$. \u003C= 10 \u0026\u0026 print'\nperl -ne 'print if 1..10'\n\n# Print the last line of a file (emulate tail -1)\nperl -ne '$last = $_; END { print $last }'\nperl -ne 'print if eof'\n\n# Print the last 10 lines of a file (emulate tail -10)\nperl -ne 'push @a, $_; @a = @a[@a-10..$#a]; END { print @a }'\n\n# Print only lines that match a regular expression\nperl -ne '/regex/ \u0026\u0026 print'\n\n# Print only lines that do not match a regular expression\nperl -ne '!/regex/ \u0026\u0026 print'\n\n# Print the line before a line that matches a regular expression\nperl -ne '/regex/ \u0026\u0026 $last \u0026\u0026 print $last; $last = $_'\n\n# Print the line after a line that matches a regular expression\nperl -ne 'if ($p) { print; $p = 0 } $p++ if /regex/'\n\n# Print lines that match regex AAA and regex BBB in any order\nperl -ne '/AAA/ \u0026\u0026 /BBB/ \u0026\u0026 print'\n\n# Print lines that don't match match regexes AAA and BBB\nperl -ne '!/AAA/ \u0026\u0026 !/BBB/ \u0026\u0026 print'\n\n# Print lines that match regex AAA followed by regex BBB followed by CCC\nperl -ne '/AAA.*BBB.*CCC/ \u0026\u0026 print'\n\n# Print lines that are 80 chars or longer\nperl -ne 'print if length \u003E= 80'\n\n# Print lines that are less than 80 chars in length\nperl -ne 'print if length \u003C 80'\n\n# Print only line 13\nperl -ne '$. == 13 \u0026\u0026 print \u0026\u0026 exit'\n\n# Print all lines except line 27\nperl -ne '$. != 27 \u0026\u0026 print'\nperl -ne 'print if $. != 27'\n\n# Print only lines 13, 19 and 67\nperl -ne 'print if $. == 13 || $. == 19 || $. == 67'\nperl -ne 'print if int($.) ~~ (13, 19, 67)' \n\n# Print all lines between two regexes (including lines that match regex)\nperl -ne 'print if /regex1/../regex2/'\n\n# Print all lines from line 17 to line 30\nperl -ne 'print if $. \u003E= 17 \u0026\u0026 $. \u003C= 30'\nperl -ne 'print if int($.) ~~ (17..30)'\nperl -ne 'print if grep { $_ == $. } 17..30'\n\n# Print the longest line\nperl -ne '$l = $_ if length($_) \u003E length($l); END { print $l }'\n\n# Print the shortest line\nperl -ne '$s = $_ if $. == 1; $s = $_ if length($_) \u003C length($s); END { print $s }'\n\n# Print all lines that contain a number\nperl -ne 'print if /\\d/'\n\n# Find all lines that contain only a number\nperl -ne 'print if /^\\d+$/'\n\n# Print all lines that contain only characters\nperl -ne 'print if /^[[:alpha:]]+$/\n\n# Print every second line\nperl -ne 'print if $. % 2'\n\n# Print every second line, starting the second line\nperl -ne 'print if $. % 2 == 0'\n\n# Print all lines that repeat\nperl -ne 'print if ++$a{$_} == 2'\n\n# Print all unique lines\nperl -ne 'print unless $a{$_}++'\n\n# Print the first field (word) of every line (emulate cut -f 1 -d ' ')\nperl -alne 'print $F[0]'\n\n# Match something that looks like an IP address\n/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/\n/^(\\d{1,3}\\.){3}\\d{1,3}$/\n\n# Test if a number is in range 0-255\n/^([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])$/\n\n# Match an IP address\nmy $ip_part = qr|([0-9]|[0-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|;\nif ($ip =~ /^($ip_part\\.){3}$ip_part$/) {\n say \"valid ip\";\n}\n\n# Check if the string looks like an email address\n/\\S+@\\S+\\.\\S+/\n\n# Check if the string is a decimal number\n/^\\d+$/\n/^[+-]?\\d+$/\n/^[+-]?\\d+\\.?\\d*$/\n\n# Check if the string is a hexadecimal number\n/^0x[0-9a-f]+$/i\n\n# Check if the string is an octal number\n/^0[0-7]+$/\n\n# Check if the string is binary\n/^[01]+$/\n\n# Check if a word appears twice in the string\n/(word).*\\1/\n\n# Increase all numbers by one in the string\n$str =~ s/(\\d+)/$1+1/ge\n\n# Extract HTTP User-Agent string from the HTTP headers\n/^User-Agent: (.+)$/\n\n# Match printable ASCII characters\n/[ -~]/\n\n# Match unprintable ASCII characters\n/[^ -~]/\n\n# Match text between two HTML tags\nm|\u003Cstrong\u003E([^\u003C]*)\u003C/strong\u003E|\nm|\u003Cstrong\u003E(.*?)\u003C/strong\u003E|\n\n# Replace all \u003Cb\u003E tags with \u003Cstrong\u003E\n$html =~ s|\u003C(/)?b\u003E|\u003C$1strong\u003E|g\n\n# Extract all matches from a regular expression\nmy @matches = $text =~ /regex/g;\n\n# Print the version of a Perl module\nperl -MModule -le 'print $Module::VERSION'\nperl -MLWP::UserAgent -le 'print $LWP::UserAgent::VERSION'","updated_at":"2016-01-23T10:10:58.000Z","id":587,"up":5,"down":0},{"cmd":"perl","msg":"# replace hamburgers with hotdogs in place in a file\nperl -p -i -e 's/hamburgers/hotdogs/g' juice_stand.txt","updated_at":"2016-01-23T10:11:29.000Z","id":54,"up":4,"down":0}]