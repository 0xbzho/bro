[{"cmd":"malloc","msg":"# What it does?\n# allocate dynamic memory for the requesting process\n\n# What is the Signature?\n# void* malloc(size_t size);\n\n# Which library to include?\n# stdlib\n\n# What is the parameter taken?\n# Number of bytes that the programmer wants.\n\n# What is returned?\n# If there is enough memory to allocate, the call will return a pointer to the allocated block, if not NULL is returned. If size is  0, then malloc returns either NULL, or a unique pointer value that can later be successfully passed to free.\n\n# Others\n#  Returned memory can contain Junk values, accessing them invokes undefined behavior.\n# When you no longer need the memory, call free and pass the pointer which was returned by malloc.\n# calloc does same thing as malloc expect that the memory is initialized with 0. \n\n# SAMPLE PROGRAM:\n\n#include\u003Cstdio.h\u003E\nint main()\n{\n    int *ptr_one;\n    //allocate \n    ptr_one = (int *)malloc(sizeof(int));\n    if (ptr_one == 0) {\n        printf(\"ERROR: Out of memory\\n\");\n        return -1;\n    }\n    \n    //use\n    *ptr_one = 25;\n    printf(\"%d\\n\", *ptr_one);\n \n    //free\n    free(ptr_one);\n\n    return 0;\n}\n\nyour_command_here","updated_at":"2014-01-27T09:18:04.000Z","id":315,"up":1,"down":0}]