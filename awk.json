[{"cmd":"awk","msg":"# Print only the first column of the input\nawk '{print $1;}'","updated_at":"2015-07-02T20:30:50.000Z","id":85,"up":15,"down":0},{"cmd":"awk","msg":"# Print only the last column of the input\nawk '{print $NF}'","updated_at":"2015-01-19T03:20:16.000Z","id":106,"up":9,"down":0},{"cmd":"awk","msg":"# print first 10 lines of file (emulates behavior of \"head\")\nawk 'NR \u003C 11'\n\n# print first line of file (emulates \"head -1\")\nawk 'NR\u003E1{exit};1'\n\n# print the last 2 lines of a file (emulates \"tail -2\")\nawk '{y=x \"\\n\" $0; x=$0};END{print y}'\n\n# print the last line of a file (emulates \"tail -1\")\nawk 'END{print}'\n\n# print only lines which match regular expression (emulates \"grep\")\nawk '/regex/'\n\n# print only lines which do NOT match regex (emulates \"grep -v\")\nawk '!/regex/'\n\n# print the line immediately before a regex, but not the line\n# containing the regex\nawk '/regex/{print x};{x=$0}'\nawk '/regex/{print (x==\"\" ? \"match on line 1\" : x)};{x=$0}'\n\n# print the line immediately after a regex, but not the line\n# containing the regex\nawk '/regex/{getline;print}'\n\n# grep for AAA and BBB and CCC (in any order)\nawk '/AAA/; /BBB/; /CCC/'\n\n# grep for AAA and BBB and CCC (in that order)\nawk '/AAA.*BBB.*CCC/'\n\n# print only lines of 65 characters or longer\nawk 'length \u003E 64'\n\n# print only lines of less than 65 characters\nawk 'length \u003C 64'\n\n# print section of file from regular expression to end of file\nawk '/regex/,0'\nawk '/regex/,EOF'\n\n# print section of file based on line numbers (lines 8-12, inclusive)\nawk 'NR==8,NR==12'\n\n# delete leading whitespace (spaces, tabs) from front of each line\n# aligns all text flush left\nawk '{sub(/^[ \\t]+/, \"\"); print}'\n\n# delete trailing whitespace (spaces, tabs) from end of each line\nawk '{sub(/[ \\t]+$/, \"\");print}'\n\n# delete BOTH leading and trailing whitespace from each line\nawk '{gsub(/^[ \\t]+|[ \\t]+$/,\"\");print}'\nawk '{$1=$1;print}' \n\n# insert 5 blank spaces at beginning of each line (make page offset)\nawk '{sub(/^/, \"     \");print}'\n\n# align all text flush right on a 79-column width\nawk '{printf \"%79s\\n\", $0}' file*\n\n# center all text on a 79-character width\nawk '{l=length();s=int((79-l)/2); printf \"%\"(s+l)\"s\\n\",$0}' file*\n\n# substitute \"foo\" with \"bar\" ONLY for lines which contain \"baz\"\nawk '/baz/{gsub(/foo/, \"bar\")};{print}'\n\n# substitute \"foo\" with \"bar\" EXCEPT for lines which contain \"baz\"\nawk '!/baz/{gsub(/foo/, \"bar\")};{print}'\n\n# change \"scarlet\" or \"ruby\" or \"puce\" to \"red\"\nawk '{gsub(/scarlet|ruby|puce/, \"red\"); print}'\n\n# reverse order of lines (emulates \"tac\")\nawk '{a[i++]=$0} END {for (j=i-1; j\u003E=0;) print a[j--] }' file*\n\n# if a line ends with a backslash, append the next line to it\n# (fails if there are multiple lines ending with backslash...)\nawk '/\\\\$/ {sub(/\\\\$/,\"\"); getline t; print $0 t; next}; 1' file*\n\n# print and sort the login names of all users\nawk -F \":\" '{ print $1 | \"sort\" }' /etc/passwd\n\n# print the first 2 fields, in opposite order, of every line\nawk '{print $2, $1}' file\n\n# switch the first 2 fields of every line\nawk '{temp = $1; $1 = $2; $2 = temp}' file\n\n# print every line, deleting the second field of that line\nawk '{ $2 = \"\"; print }'\n\n# print in reverse order the fields of every line\nawk '{for (i=NF; i\u003E0; i--) printf(\"%s \",i);printf (\"\\n\")}' file\n\n# remove duplicate, consecutive lines (emulates \"uniq\")\nawk 'a !~ $0; {a=$0}'\n\n# remove duplicate, nonconsecutive lines\nawk '! a[$0]++'                     # most concise script\nawk '!($0 in a) {a[$0];print}'      # most efficient script\n\n# concatenate every 5 lines of input, using a comma separator\n# between fields\nawk 'ORS=%NR%5?\",\":\"\\n\"' file","updated_at":"2015-12-28T20:07:04.000Z","id":593,"up":9,"down":0},{"cmd":"awk","msg":"# Print each line of input, with line numbers\nawk '{print NR\":\",$0;}'","updated_at":"2015-05-28T00:55:33.000Z","id":87,"up":7,"down":0},{"cmd":"awk","msg":"# Remove duplicate line entries in a file without sorting \nawk '!x[$0]++' \u003Cfile\u003E","updated_at":"2014-01-27T11:45:55.000Z","id":297,"up":2,"down":0},{"cmd":"awk","msg":"# Prints one line for every second field in my_server.log\n# 'Fields' are separated by whitespace.\ncat my_server.log | awk '{ print $2 }'","updated_at":"2014-01-26T10:45:46.000Z","id":235,"up":1,"down":0},{"cmd":"awk","msg":"# de-deplicate lines in a text file\nawk '!x[$0]++' input.txt \u003E output.txt","updated_at":"2014-01-30T17:23:15.000Z","id":438,"up":1,"down":0},{"cmd":"awk","msg":"# removes lines that exist in file2 from file1\nawk 'NR==FNR{a[$0]++;next} !a[$0]' file2.txt file1.txt \u003E output.txt","updated_at":"2014-01-30T17:28:04.000Z","id":441,"up":1,"down":0},{"cmd":"awk","msg":"# Calculate the average of a file full of line-separated numbers\nawk '{ sum += $2; n++ } END { if (n \u003E 0) print sum / n; }'","updated_at":"2015-01-30T06:19:11.000Z","id":998,"up":1,"down":0}]